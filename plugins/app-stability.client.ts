export default defineNuxtPlugin(() => {
  if (!process.client) return;

  const router = useRouter();
  const nuxtApp = useNuxtApp();

  let navigationTimeoutId: NodeJS.Timeout | null = null;
  let isCurrentlyNavigating = false;
  let navigationFailures = 0;
  const MAX_NAVIGATION_FAILURES = 3; // –ú–∞–∫—Å–∏–º—É–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
  const NAVIGATION_TIMEOUT_MS = 15000; // 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  const FETCH_TIMEOUT_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å

  const forceAppReload = (reason: string) => {
    console.warn(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    window.location.reload();
  };

  // 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–æ—É—Ç–µ—Ä–∞
  router.beforeEach((to, from) => {
    if (isCurrentlyNavigating) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä.');
      if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    }
    isCurrentlyNavigating = true;

    navigationTimeoutId = setTimeout(() => {
      console.error(`‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ "${to.fullPath}" –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.`);
      navigationFailures++;
      isCurrentlyNavigating = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

      if (navigationFailures >= MAX_NAVIGATION_FAILURES) {
        forceAppReload(`—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–π (${navigationFailures})`);
      } else {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ window.location, –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –µ—Å–ª–∏ —Ä–æ—É—Ç–µ—Ä "–∑–∞–≤–∏—Å"
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞: ${to.fullPath}`);
        window.location.href = to.fullPath;
      }
    }, NAVIGATION_TIMEOUT_MS);
  });

  router.afterEach(() => {
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    isCurrentlyNavigating = false;
    navigationFailures = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  });

  router.onError((error) => {
    console.error('üö® –û—à–∏–±–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞:', error);
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    isCurrentlyNavigating = false;
    navigationFailures++;
    if (navigationFailures >= MAX_NAVIGATION_FAILURES) {
      forceAppReload(`–æ—à–∏–±–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –∏ ${navigationFailures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫`);
    }
  });

  // 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ window.fetch)
  const originalFetch = window.fetch;
  const activeFetchControllers = new Set<AbortController>();

  window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
    const controller = new AbortController();
    activeFetchControllers.add(controller);

    const fetchTimeoutId = setTimeout(() => {
      console.warn(`‚ö†Ô∏è Fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ "${String(input)}" –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${FETCH_TIMEOUT_MS}ms).`);
      controller.abort();
    }, FETCH_TIMEOUT_MS);

    try {
      const response = await originalFetch(input, {
        ...init,
        signal: controller.signal,
      });
      return response;
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log(`Fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ "${String(input)}" –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`);
      } else {
        console.error(`Fetch –æ—à–∏–±–∫–∞ –¥–ª—è "${String(input)}":`, error);
      }
      throw error;
    } finally {
      clearTimeout(fetchTimeoutId);
      activeFetchControllers.delete(controller);
    }
  };
  
  // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ fetch –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
   router.beforeEach(() => {
    if (activeFetchControllers.size > 5) { // –ü–æ—Ä–æ–≥ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" –∑–∞–ø—Ä–æ—Å–æ–≤
      console.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${activeFetchControllers.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö fetch –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π. –û—Ç–º–µ–Ω—è–µ–º...`);
      activeFetchControllers.forEach(controller => controller.abort());
      activeFetchControllers.clear();
    }
  });


  // 3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–∑–¥–æ—Ä–æ–≤—å—è"
  const HEALTH_CHECK_INTERVAL_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥
  let lastActivityTime = Date.now();

  router.afterEach(() => {
    lastActivityTime = Date.now();
  });
  
  const healthCheckIntervalId = setInterval(() => {
    const now = Date.now();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å–ª–∞ –ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ isCurrentlyNavigating true –¥–æ–ª—å—à–µ —á–µ–º —Ç–∞–π–º–∞—É—Ç)
    if (isCurrentlyNavigating && (now - lastActivityTime) > NAVIGATION_TIMEOUT_MS + 5000) { // +5 —Å–µ–∫ –±—É—Ñ–µ—Ä
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–≤–∏—Å—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è health check.');
        if (navigationTimeoutId) clearTimeout(navigationTimeoutId); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–∞–∫ –≤ router.beforeEach
         navigationFailures++;
         isCurrentlyNavigating = false; 
         if (navigationFailures >= MAX_NAVIGATION_FAILURES) {
            forceAppReload(`–∑–∞–≤–∏—Å—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ health check (${navigationFailures})`);
         } else {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–∏—Å—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (health check)`);
            // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å "–º—è–≥–∫–∏–π" —Ä–µ—Å–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            router.push('/'); 
         }
    }

    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
    if (!isCurrentlyNavigating && (now - lastActivityTime > 5 * 60 * 1000)) {
      console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –æ—á–∏—â–∞–µ–º Pinia stores –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏...');
      if (nuxtApp.$pinia) {
        for (const storeName in nuxtApp.$pinia.state.value) {
          const store = nuxtApp.$pinia.state.value[storeName];
          if (store && typeof store.$reset === 'function') {
            try {
              store.$reset();
            } catch (e) {
              console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å store ${storeName}:`, e);
            }
          }
        }
      }
      lastActivityTime = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ —á–∏—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
    }
  }, HEALTH_CHECK_INTERVAL_MS);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  window.addEventListener('beforeunload', () => {
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    clearInterval(healthCheckIntervalId);
    activeFetchControllers.forEach(controller => controller.abort());
  });

  console.log('üõ°Ô∏è –ü–ª–∞–≥–∏–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.');
}); 