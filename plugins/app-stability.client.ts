export default defineNuxtPlugin(() => {
  if (!process.client) return;

  const router = useRouter();
  const nuxtApp = useNuxtApp();
  const { user, refreshUserSession } = useAuth(); 

  const MAX_INACTIVITY_MS = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ—è –¥–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const CHECK_INTERVAL_WHEN_ACTIVE_MS = 1 * 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
  const NAVIGATION_TIMEOUT_MS = 20000; 
  const FETCH_TIMEOUT_MS = 30000; 
  const MAX_NAVIGATION_FAILURES_BEFORE_RELOAD = 2;

  let lastActivityTime = Date.now();
  let lastVisibleTime = document.visibilityState === 'visible' ? Date.now() : 0;
  let navigationTimeoutId: NodeJS.Timeout | null = null;
  let isCurrentlyNavigating = false;
  let navigationFailures = 0;
  let appWasHidden = document.visibilityState !== 'visible';

  const resetStoresState = (reason: string) => {
    console.log(`üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è Pinia stores. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    if (nuxtApp.$pinia) {
      for (const storeName in nuxtApp.$pinia.state.value) {
        const store = nuxtApp.$pinia.state.value[storeName];
        if (store && typeof store.$reset === 'function') {
          try {
            store.$reset();
            console.log(`  Store ${storeName} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.`);
          } catch (e) {
            console.warn(`  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å store ${storeName}:`, e);
          }
        }
      }
    }
  };

  const performAppResumeActions = async (resumeReason: string) => {
    console.log(`üöÄ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏—á–∏–Ω–∞: ${resumeReason}`);
    lastActivityTime = Date.now();
    lastVisibleTime = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º/–≤–∏–¥–∏–º—ã–º
    appWasHidden = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

    if (user.value) {
      try {
        console.log('  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await refreshUserSession(); 
        console.log('  –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
      } catch (error) {
        console.warn('  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }

    resetStoresState('–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ—è/—Å–∫—Ä—ã—Ç–∏—è');
    
    console.warn('  –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
    router.go(0); 
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è lastActivityTime)
  const activityEvents: (keyof WindowEventMap)[] = ['mousemove', 'mousedown', 'keydown', 'touchstart', 'scroll'];
  activityEvents.forEach(event => {
    window.addEventListener(event, () => {
      lastActivityTime = Date.now();
    }, { passive: true });
  });

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è visibilitychange
  document.addEventListener('visibilitychange', () => {
    const now = Date.now();
    if (document.visibilityState === 'visible') {
      console.log('–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π.');
      const timeHidden = now - lastVisibleTime; // –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞
      // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      // (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–∏–º–∞, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω)
      if (appWasHidden || (now - lastActivityTime > MAX_INACTIVITY_MS)) {
        console.log(`  –í–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ ${Math.round(timeHidden / 1000)}s –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.`);
        performAppResumeActions('–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥–∏–º—É—é/–∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É');
      } else {
        // –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –Ω–æ –ø—Ä–æ—Å—Ç–æ–π –±—ã–ª –Ω–µ–¥–æ–ª–≥–∏–º, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        lastVisibleTime = now;
        lastActivityTime = now; // –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      }
    } else {
      console.log('–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ —Å–∫—Ä—ã—Ç–æ–π.');
      lastVisibleTime = now; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º–æ–π
      appWasHidden = true;
    }
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π (–≤–∏–¥–∏–º–æ–π)
  // –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ª–æ–≤–∏—Ç—å —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ visibilitychange –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –≤–Ω—É—Ç—Ä–∏ –≤–∏–¥–∏–º–æ–π –≤–∫–ª–∞–¥–∫–∏
  setInterval(() => {
    if (document.visibilityState === 'visible') {
      const now = Date.now();
      if (now - lastActivityTime > MAX_INACTIVITY_MS) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.');
        performAppResumeActions('–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ');
      }
    }
  }, CHECK_INTERVAL_WHEN_ACTIVE_MS);


  // --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–æ—É—Ç–µ—Ä–∞ –∏ fetch --- 
  const forceAppReloadOnError = (reason: string) => {
    console.warn(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    window.location.reload();
  };

  router.beforeEach((to, from) => {
    lastActivityTime = Date.now(); // –õ—é–±–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (isCurrentlyNavigating) {
      if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    }
    isCurrentlyNavigating = true;

    navigationTimeoutId = setTimeout(() => {
      console.error(`‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ "${to.fullPath}" —Ç–∞–π–º–∞—É—Ç (${NAVIGATION_TIMEOUT_MS}ms).`);
      isCurrentlyNavigating = false;
      navigationFailures++;
      if (navigationFailures >= MAX_NAVIGATION_FAILURES_BEFORE_RELOAD) {
        forceAppReloadOnError(`—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–π (${navigationFailures})`);
      } else {
        window.location.href = to.fullPath;
      }
    }, NAVIGATION_TIMEOUT_MS);
  });

  router.afterEach(() => {
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    isCurrentlyNavigating = false;
    navigationFailures = 0;
    lastActivityTime = Date.now(); 
  });

  router.onError((error) => {
    console.error('üö® –û—à–∏–±–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞:', error);
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    isCurrentlyNavigating = false;
    navigationFailures++;
    if (navigationFailures >= MAX_NAVIGATION_FAILURES_BEFORE_RELOAD) {
      forceAppReloadOnError(`–æ—à–∏–±–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ (${navigationFailures} –Ω–µ—É–¥–∞—á)`);
    }
  });

  const originalFetch = window.fetch;
  const activeFetchControllers = new Set<AbortController>();

  window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
    lastActivityTime = Date.now(); // –õ—é–±–æ–π fetch - —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const controller = new AbortController();
    activeFetchControllers.add(controller);
    const fetchTimeoutId = setTimeout(() => {
      console.warn(`‚ö†Ô∏è Fetch –∑–∞–ø—Ä–æ—Å "${String(input)}" —Ç–∞–π–º–∞—É—Ç (${FETCH_TIMEOUT_MS}ms).`);
      controller.abort();
    }, FETCH_TIMEOUT_MS);

    try {
      return await originalFetch(input, { ...init, signal: controller.signal });
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log(`Fetch "${String(input)}" –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`);
      } else {
        console.error(`Fetch –æ—à–∏–±–∫–∞ "${String(input)}":`, error);
      }
      throw error;
    } finally {
      clearTimeout(fetchTimeoutId);
      activeFetchControllers.delete(controller);
    }
  };
  
  router.beforeEach(() => {
    // –£–±—Ä–∞–ª –æ—Ç–º–µ–Ω—É fetch –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–¥–µ—Å—å, —Ç.–∫. performAppResumeActions –¥–µ–ª–∞–µ—Ç router.go(0)
    // –∏ —ç—Ç–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
    // –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å, –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ performAppResumeActions.
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  window.addEventListener('beforeunload', () => {
    if (navigationTimeoutId) clearTimeout(navigationTimeoutId);
    // clearInterval –¥–ª—è healthCheckIntervalId –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω
    activeFetchControllers.forEach(controller => controller.abort());
  });

  console.log('üõ°Ô∏è –ü–ª–∞–≥–∏–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (v3 - —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ –∏ –ø—Ä–æ—Å—Ç–æ–µ) –∑–∞–ø—É—â–µ–Ω.');
}); 