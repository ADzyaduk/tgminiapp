/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ Telegram
 */

import { serverSupabaseClient, serverSupabaseServiceRole } from '#supabase/server'
import { H3Event } from 'h3'

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export function formatBookingNotification(booking: any): string {
  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ guest_phone (Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Bot API)
  const phoneNumber = booking.guest_phone || '–ù–µ —É–∫–∞–∑–∞–Ω'

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ guest_name –∏–ª–∏ profile.name
  const clientName = booking.guest_name || booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

  // –ü–æ–ª—É—á–∞–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  const emailPart = booking.profile?.email ? ` (${booking.profile.email})` : ''

  return `–ö–ª–∏–µ–Ω—Ç: ${clientName}${emailPart}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
–õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞: ${formattedDate}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatStatusNotification(booking: any, status: string): string {
  const statusEmoji = {
    pending: '‚è≥',
    confirmed: '‚úÖ',
    cancelled: '‚ùå'
  }[status] || 'üîî'

  const statusText = {
    pending: '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    confirmed: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    cancelled: '–æ—Ç–º–µ–Ω–µ–Ω–æ'
  }[status] || '–∏–∑–º–µ–Ω–∏–ª–æ —Å—Ç–∞—Ç—É—Å'

  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  return `${statusEmoji} <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}</b>

ID: ${booking.id}
–°—Ç–∞—Ç—É—Å: <b>${statusText}</b>
–ö–ª–∏–µ–Ω—Ç: ${booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${booking.profile?.email || '–ù–µ—Ç email'})
–¢–µ–ª–µ—Ñ–æ–Ω: ${booking.guest_phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞: ${formattedDate}
–¶–µ–Ω–∞: ${booking.price} ‚ÇΩ

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º</i>`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
 */
export function formatGroupTripStatusNotification(booking: any, status: string): string {
  const statusEmoji = {
    confirmed: '‚úÖ',
    completed: 'üèÅ',
    cancelled: '‚ùå'
  }[status] || 'üîî'

  const statusText = {
    confirmed: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    completed: '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    cancelled: '–æ—Ç–º–µ–Ω–µ–Ω–æ'
  }[status] || '–∏–∑–º–µ–Ω–∏–ª–æ —Å—Ç–∞—Ç—É—Å'

  const formattedDate = new Date(booking.group_trip?.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const totalTickets = booking.adult_count + booking.child_count
  const clientName = booking.guest_name || booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

  return `${statusEmoji} <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ ${statusText}</b>

ID: ${booking.id}
–°—Ç–∞—Ç—É—Å: <b>${statusText}</b>
–ö–ª–∏–µ–Ω—Ç: ${clientName} (${booking.profile?.email || '–ù–µ—Ç email'})
–¢–µ–ª–µ—Ñ–æ–Ω: ${booking.guest_phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞: ${formattedDate}
–ë–∏–ª–µ—Ç—ã: ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç. = ${totalTickets} –º–µ—Å—Ç
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.total_price} ‚ÇΩ`
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
 */
export async function sendGroupTripStatusNotification(
  booking: any,
  status: string,
  managerName?: string
): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID —É –∫–ª–∏–µ–Ω—Ç–∞
  if (!booking.profile?.telegram_id) {
    console.log('Client has no telegram_id, skipping group trip status notification')
    return false
  }

  const statusEmoji = {
    confirmed: '‚úÖ',
    completed: 'üèÅ',
    cancelled: '‚ùå'
  }[status] || 'üîî'

  const statusText = {
    confirmed: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    completed: '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    cancelled: '–æ—Ç–º–µ–Ω–µ–Ω–æ'
  }[status] || '–∏–∑–º–µ–Ω–∏–ª–æ —Å—Ç–∞—Ç—É—Å'

  const formattedDate = new Date(booking.group_trip?.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const totalTickets = booking.adult_count + booking.child_count
  const managerPart = managerName ? ` (${managerName})` : ''

  const message = `${statusEmoji} <b>–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –∏–∑–º–µ–Ω–µ–Ω</b>

–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ ${statusText} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º${managerPart}.

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üë• <b>–ë–∏–ª–µ—Ç—ã:</b> ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç. = ${totalTickets} –º–µ—Å—Ç
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.total_price} ‚ÇΩ
üéØ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${statusText}

${status === 'cancelled' ? 'üòû <i>–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –æ—Ç–º–µ–Ω—É!</i>' : 'üéâ <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!</i>'}`

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })

    if (response.ok) {
      console.log(`‚úÖ Sent group trip status notification to client: ${booking.profile.telegram_id}`)
      return true
    } else {
      console.error(`‚ùå Failed to send group trip status notification to client: ${booking.profile.telegram_id}`)
      return false
    }
  } catch (error) {
    console.error('Error sending group trip status notification to client:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ª–æ–¥–∫–∏
 */
export async function sendAdminNotification(
  message: string,
  options: {
    parseMode?: 'HTML' | 'Markdown',
    boatId?: string,
    bookingId?: string,
    bookingType?: 'regular' | 'group_trip',
    event?: H3Event
  } = {}
): Promise<boolean> {
  const { parseMode = 'HTML', boatId, bookingId, bookingType = 'regular', event } = options

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN

    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    let replyMarkup = undefined
    if (bookingId && bookingType) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data –¥–æ 64 –±–∞–π—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
      const confirmData = `${bookingType}:confirm:${bookingId}`.substring(0, 64)
      const cancelData = `${bookingType}:cancel:${bookingId}`.substring(0, 64)

      console.log(`üîò Creating inline buttons:`)
      console.log(`   ‚úÖ Confirm: ${confirmData}`)
      console.log(`   ‚ùå Cancel: ${cancelData}`)

      replyMarkup = {
        inline_keyboard: [
          [
            {
              text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
              callback_data: confirmData
            },
            {
              text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
              callback_data: cancelData
            }
          ]
        ]
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ª–æ–¥–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω boatId
    let sentToManagers = false
    if (boatId && event) {
      try {
        const supabase = serverSupabaseServiceRole(event)

        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —ç—Ç–æ–π –ª–æ–¥–∫–∏
        const { data: managers } = await supabase
          .from('boat_managers')
          .select('user_id')
          .eq('boat_id', boatId)

        if (managers && managers.length > 0) {
          // –ü–æ–ª—É—á–∞–µ–º Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
          const { data: profiles } = await supabase
            .from('profiles')
            .select('telegram_id')
            .in('id', managers.map((m: any) => m.user_id))
            .not('telegram_id', 'is', null)

          if (profiles && profiles.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            const results = await Promise.all(
              profiles.map(async (profile: any) => {
                try {
                  const body: any = {
                    chat_id: profile.telegram_id,
                    text: message,
                    parse_mode: parseMode
                  }

                  if (replyMarkup) {
                    body.reply_markup = replyMarkup
                  }

                  const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                  })

                  return response.ok
                } catch (error) {
                  console.error(`Failed to send notification to manager ${profile.telegram_id}:`, error)
                  return false
                }
              })
            )

            sentToManagers = results.some(Boolean)
            console.log(`Sent notifications to ${results.filter(Boolean).length} boat managers`)
          }
        }
      } catch (error) {
        console.error('Error sending notifications to boat managers:', error)
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏–ª–∏ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    if (!sentToManagers) {
      const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID === "–≤–∞—à_chat_id_–¥–ª—è_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        ? "1231157381"  // –†–µ–∞–ª—å–Ω—ã–π chat ID –∏–∑ –ª–æ–≥–æ–≤
        : (process.env.TELEGRAM_ADMIN_CHAT_ID || "1231157381")

      console.log(`üì§ Sending notification to admin chat ID: ${adminChatId}`)
      console.log(`üìù Message: ${message.substring(0, 100)}...`)

      const body: any = {
        chat_id: adminChatId,
        text: message,
        parse_mode: parseMode
      }

      if (replyMarkup) {
        console.log(`üîò Adding buttons: ${JSON.stringify(replyMarkup)}`)
        body.reply_markup = replyMarkup
      }

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      })

      const result = response.ok
      if (!result) {
        const errorData = await response.json()
        console.error(`‚ùå Admin notification failed:`, errorData)
      } else {
        console.log(`‚úÖ Admin notification sent successfully`)
      }
      return result
    }

    return sentToManagers
  } catch (error) {
    console.error('Failed to send admin notification:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–¥–∫–∏
 */
export async function sendBoatManagersNotification(
  event: H3Event,
  boatId: string,
  message: string,
  parseMode: 'HTML' | 'Markdown' = 'HTML'
): Promise<boolean> {
  try {
    const supabase = serverSupabaseServiceRole(event)

    // –ü–æ–ª—É—á–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —ç—Ç–æ–π –ª–æ–¥–∫–∏
    const { data: managers } = await supabase
      .from('boat_managers')
      .select('user_id')
      .eq('boat_id', boatId)

    if (!managers || managers.length === 0) {
      return false
    }

    // –ü–æ–ª—É—á–∞–µ–º Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const { data: profiles } = await supabase
      .from('profiles')
      .select('telegram_id')
      .in('id', managers.map((m: any) => m.user_id))
      .not('telegram_id', 'is', null)

    if (!profiles || profiles.length === 0) {
      return false
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    const token = process.env.TELEGRAM_BOT_TOKEN

    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const results = await Promise.all(
      profiles.map(async (profile: any) => {
        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: profile.telegram_id,
              text: message,
              parse_mode: parseMode
            })
          })

          return response.ok
        } catch (error) {
          console.error(`Failed to send notification to manager ${profile.telegram_id}:`, error)
          return false
        }
      })
    )

    return results.some(Boolean)
  } catch (error) {
    console.error('Failed to send boat managers notification:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function sendClientStatusNotification(
  booking: any,
  status: string,
  managerName?: string
): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID —É –∫–ª–∏–µ–Ω—Ç–∞
  if (!booking.profile?.telegram_id) {
    console.log('Client has no telegram_id, skipping notification')
    return false
  }

  const statusConfig = {
    pending: {
      emoji: '‚è≥',
      title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ',
      description: '–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ –∫ –Ω–∞–º –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.',
      color: 'üü°'
    },
    confirmed: {
      emoji: '‚úÖ',
      title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      description: '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ñ–¥—ë–º –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!',
      color: 'üü¢'
    },
    cancelled: {
      emoji: '‚ùå',
      title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      description: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.',
      color: 'üî¥'
    }
  }

  const config = statusConfig[status as keyof typeof statusConfig]
  if (!config) return false

  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const formattedEndTime = new Date(booking.end_time).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })

  const duration = Math.round((new Date(booking.end_time).getTime() - new Date(booking.start_time).getTime()) / (1000 * 60 * 60))

  const managerInfo = managerName ? `\nüë§ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${managerName}` : ''

  const message = `${config.emoji} <b>${config.title}</b>

${config.description}

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${formattedEndTime}
‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${duration} —á.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.price} ‚ÇΩ
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${booking.peoples || 1}${managerInfo}

${status === 'confirmed' ? 'üéâ <i>–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!</i>' : status === 'cancelled' ? 'üìû <i>–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>' : '‚è∞ <i>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</i>'}`

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })

    if (response.ok) {
      console.log(`‚úÖ Sent status notification to client: ${booking.profile.telegram_id}`)
      return true
    } else {
      console.error(`‚ùå Failed to send status notification to client: ${booking.profile.telegram_id}`)
      return false
    }
  } catch (error) {
    console.error('Error sending status notification to client:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è)
 */
export async function sendClientBookingConfirmation(booking: any): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID —É –∫–ª–∏–µ–Ω—Ç–∞
  if (!booking.profile?.telegram_id) {
    console.log('Client has no telegram_id, skipping confirmation')
    return false
  }

  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const formattedEndTime = new Date(booking.end_time).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })

  const duration = Math.round((new Date(booking.end_time).getTime() - new Date(booking.start_time).getTime()) / (1000 * 60 * 60))

  const message = `üìù <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${formattedEndTime}
‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${duration} —á.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.price} ‚ÇΩ
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${booking.peoples || 1}

‚è≥ <i>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>`

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })

    if (response.ok) {
      console.log(`‚úÖ Sent booking confirmation to client: ${booking.profile.telegram_id}`)
      return true
    } else {
      console.error(`‚ùå Failed to send booking confirmation to client: ${booking.profile.telegram_id}`)
      return false
    }
  } catch (error) {
    console.error('Error sending booking confirmation to client:', error)
    return false
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 */
export function formatBookingNotificationEnhanced(booking: any): string {
  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const formattedEndTime = new Date(booking.end_time).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })

  const duration = Math.round((new Date(booking.end_time).getTime() - new Date(booking.start_time).getTime()) / (1000 * 60 * 60))

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ guest_phone –∏–ª–∏ profile.phone
  const phoneNumber = booking.guest_phone || booking.profile?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ guest_name –∏–ª–∏ profile.name
  const clientName = booking.guest_name || booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

  // –ü–æ–ª—É—á–∞–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  const emailPart = booking.profile?.email ? `\nüìß <b>Email:</b> ${booking.profile.email}` : ''

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
  const notePart = booking.guest_note ? `\nüí¨ <b>–ó–∞–º–µ—Ç–∫–∞:</b> ${booking.guest_note}` : ''

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –±–µ–∑–æ–ø–∞—Å–Ω–æ - –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
  const displayId = typeof booking.id === 'string' && booking.id.includes('-')
    ? booking.id.split('-')[0]
    : booking.id

  return `üîî <b>–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}${emailPart}

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${formattedEndTime}
‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${duration} —á.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.price} ‚ÇΩ
üíµ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> ${booking.prepayment || 0} ‚ÇΩ
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${booking.peoples || 1}${notePart}

üÜî <b>ID:</b> #${displayId}

‚ö° <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</i>`
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export async function sendBookingReminder(booking: any, hoursUntil: number): Promise<boolean> {
  if (!booking.profile?.telegram_id) {
    return false
  }

  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const message = `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</b>

–î–æ –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å ${hoursUntil} —á.!

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${booking.peoples || 1}

üéØ <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–æ–µ–∑–¥–∫–µ!</i>`

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return false

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })

    return response.ok
  } catch (error) {
    console.error('Error sending booking reminder:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
 */
export async function sendGroupTripBookingConfirmation(booking: any): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID —É –∫–ª–∏–µ–Ω—Ç–∞
  if (!booking.profile?.telegram_id) {
    console.log('Client has no telegram_id, skipping group trip confirmation')
    return false
  }

  const formattedDate = new Date(booking.group_trip.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const formattedEndTime = new Date(booking.group_trip.end_time).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })

  const totalTickets = booking.adult_count + booking.child_count

  const message = `üö§ <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! –í–∞—à–∏ –º–µ—Å—Ç–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.group_trip.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${formattedEndTime}
üë• <b>–ë–∏–ª–µ—Ç—ã:</b> ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç. = ${totalTickets} –º–µ—Å—Ç
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.total_price} ‚ÇΩ

‚úÖ <i>–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–æ—á–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.</i>`

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })

    if (response.ok) {
      console.log(`‚úÖ Sent group trip confirmation to client: ${booking.profile.telegram_id}`)
      return true
    } else {
      console.error(`‚ùå Failed to send group trip confirmation to client: ${booking.profile.telegram_id}`)
      return false
    }
  } catch (error) {
    console.error('Error sending group trip confirmation to client:', error)
    return false
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 */
export function formatGroupTripBookingNotification(booking: any): string {
  const formattedDate = new Date(booking.group_trip.start_time).toLocaleDateString('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const formattedEndTime = new Date(booking.group_trip.end_time).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })

  const totalTickets = booking.adult_count + booking.child_count

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
  const clientName = booking.guest_name || booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
  const phoneNumber = booking.guest_phone || booking.profile?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'

  // –ü–æ–ª—É—á–∞–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  const emailPart = booking.profile?.email ? `\nüìß <b>Email:</b> ${booking.profile.email}` : ''

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
  const notePart = booking.notes ? `\nüí¨ <b>–ó–∞–º–µ—Ç–∫–∞:</b> ${booking.notes}` : ''

  return `üö§ <b>–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü–û–í–û–ô –ü–û–ï–ó–î–ö–ò</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}${emailPart}

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.group_trip.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${formattedEndTime}
üë• <b>–ë–∏–ª–µ—Ç—ã:</b> ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç. = ${totalTickets} –º–µ—Å—Ç
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.total_price} ‚ÇΩ${notePart}

üéØ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
üìä <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> ${booking.group_trip.available_seats - totalTickets}

‚úÖ <i>–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞</i>`
}
