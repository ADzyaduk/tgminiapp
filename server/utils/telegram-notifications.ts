/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ Telegram
 */

import { serverSupabaseClient } from '#supabase/server'
import { H3Event } from 'h3'

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export function formatBookingNotification(booking: any): string {
  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })
  
  return `üÜï <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>
  
ID: ${booking.id}
–°—Ç–∞—Ç—É—Å: <b>–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>
–ö–ª–∏–µ–Ω—Ç: ${booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${booking.profile?.email || '–ù–µ—Ç email'})
–¢–µ–ª–µ—Ñ–æ–Ω: ${booking.profile?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞: ${formattedDate}
–¶–µ–Ω–∞: ${booking.price} ‚ÇΩ

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º</i>`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatStatusNotification(booking: any, status: string): string {
  const statusEmoji = {
    pending: '‚è≥',
    confirmed: '‚úÖ',
    cancelled: '‚ùå'
  }[status] || 'üîî'
  
  const statusText = {
    pending: '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    confirmed: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    cancelled: '–æ—Ç–º–µ–Ω–µ–Ω–æ'
  }[status] || '–∏–∑–º–µ–Ω–∏–ª–æ —Å—Ç–∞—Ç—É—Å'
  
  const formattedDate = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })
  
  return `${statusEmoji} <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}</b>
  
ID: ${booking.id}
–°—Ç–∞—Ç—É—Å: <b>${statusText}</b>
–ö–ª–∏–µ–Ω—Ç: ${booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${booking.profile?.email || '–ù–µ—Ç email'})
–¢–µ–ª–µ—Ñ–æ–Ω: ${booking.profile?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞: ${formattedDate}
–¶–µ–Ω–∞: ${booking.price} ‚ÇΩ

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º</i>`
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ª–æ–¥–∫–∏
 */
export async function sendAdminNotification(
  message: string,
  options: {
    parseMode?: 'HTML' | 'Markdown',
    boatId?: string,
    bookingId?: string
  } = {}
): Promise<boolean> {
  const { parseMode = 'HTML', boatId, bookingId } = options
  
  try {
    const runtimeConfig = useRuntimeConfig()
    const token = runtimeConfig.public.telegramBotToken
    
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }
    
    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
    // ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID
    
    if (!adminChatId) {
      console.error('Admin chat ID not configured')
      return false
    }
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const inlineKeyboard = bookingId ? {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `booking:confirm:${bookingId}` },
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `booking:cancel:${bookingId}` }
        ],
        [
          { text: "üîç –î–µ—Ç–∞–ª–∏", callback_data: `booking:details:${bookingId}` }
        ]
      ]
    } : undefined
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: adminChatId,
        text: message,
        parse_mode: parseMode,
        reply_markup: inlineKeyboard
      })
    })
    
    return response.ok
  } catch (error) {
    console.error('Failed to send admin notification:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–¥–∫–∏
 */
export async function sendBoatManagersNotification(
  event: H3Event,
  boatId: string,
  message: string,
  parseMode: 'HTML' | 'Markdown' = 'HTML'
): Promise<boolean> {
  try {
    const supabase = serverSupabaseClient(event)
    
    // –ü–æ–ª—É—á–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —ç—Ç–æ–π –ª–æ–¥–∫–∏
    const { data: managers } = await supabase
      .from('boat_managers')
      .select('user_id')
      .eq('boat_id', boatId)
    
    if (!managers || managers.length === 0) {
      return false
    }
    
    // –ü–æ–ª—É—á–∞–µ–º Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const { data: profiles } = await supabase
      .from('profiles')
      .select('telegram_id')
      .in('id', managers.map((m: any) => m.user_id))
      .not('telegram_id', 'is', null)
    
    if (!profiles || profiles.length === 0) {
      return false
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    const runtimeConfig = useRuntimeConfig()
    const token = runtimeConfig.public.telegramBotToken
    
    if (!token) {
      console.error('Telegram token not configured')
      return false
    }
    
    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`
    
    const results = await Promise.all(
      profiles.map(async (profile: any) => {
        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: profile.telegram_id,
              text: message,
              parse_mode: parseMode
            })
          })
          
          return response.ok
        } catch (error) {
          console.error(`Failed to send notification to manager ${profile.telegram_id}:`, error)
          return false
        }
      })
    )
    
    return results.some(Boolean)
  } catch (error) {
    console.error('Failed to send boat managers notification:', error)
    return false
  }
} 