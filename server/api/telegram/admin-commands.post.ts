import { defineEventHandler, readBody } from 'h3'
import { serverSupabaseClient } from '#supabase/server'

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!body || !body.message) {
      return { status: 400, body: { error: 'Invalid request' } }
    }

    const { message } = body
    const { chat, text, from } = message

    if (!text || !text.startsWith('/admin')) {
      return { status: 200, body: { success: true } }
    }

    const supabase = await serverSupabaseClient(event)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const { data: adminUser } = await supabase
      .from('profiles')
      .select('id, role, name')
      .eq('telegram_id', from.id.toString())
      .eq('role', 'admin')
      .single()

    if (!adminUser) {
      await sendMessage(chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      return { status: 403, body: { error: 'Access denied' } }
    }

    const command = text.split(' ')[0].toLowerCase()
    const args = text.split(' ').slice(1)

    switch (command) {
      case '/admin':
        return await handleAdminMenu(chat.id)

      case '/adminstats':
        return await handleAdminStats(chat.id, supabase)

      case '/admintoday':
        return await handleTodayBookings(chat.id, supabase)

      case '/adminremind':
        return await handleSendReminders(chat.id, event)

      default:
        await sendMessage(chat.id, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')
    }

    return { status: 200, body: { success: true } }
  } catch (error) {
    console.error('Error in admin commands handler:', error)
    return { status: 500, body: { error: 'Internal server error' } }
  }
})

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function handleAdminMenu(chatId: number) {
  const message = `üëë <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/adminstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
/admintoday - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/adminremind - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üîî –í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.`

  return await sendMessage(chatId, message)
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function handleAdminStats(chatId: number, supabase: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const thirtyDaysAgo = new Date()
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)

    const { data: allBookings } = await supabase
      .from('bookings')
      .select('status, price, created_at')
      .gte('created_at', thirtyDaysAgo.toISOString())

    const { data: todayBookings } = await supabase
      .from('bookings')
      .select('status')
      .gte('created_at', new Date().toISOString().split('T')[0])

    if (!allBookings) {
      return await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    }

    const total = allBookings.length
    const confirmed = allBookings.filter((b: any) => b.status === 'confirmed').length
    const pending = allBookings.filter((b: any) => b.status === 'pending').length
    const cancelled = allBookings.filter((b: any) => b.status === 'cancelled').length

    const totalRevenue = allBookings
      .filter((b: any) => b.status === 'confirmed')
      .reduce((sum: number, b: any) => sum + (b.price || 0), 0)

    const todayTotal = todayBookings?.length || 0

    const message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π</b>

üìà –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${total}
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${confirmed}
‚è≥ –û–∂–∏–¥–∞–µ—Ç: ${pending}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: ${cancelled}

üí∞ –í—ã—Ä—É—á–∫–∞: ${totalRevenue.toLocaleString('ru-RU')} ‚ÇΩ

üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayTotal} –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${total > 0 ? Math.round((confirmed / total) * 100) : 0}%`

    return await sendMessage(chatId, message)
  } catch (error) {
    console.error('Error getting admin stats:', error)
    return await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function handleTodayBookings(chatId: number, supabase: any) {
  try {
    const today = new Date()
    const startOfDay = new Date(today)
    startOfDay.setHours(0, 0, 0, 0)

    const endOfDay = new Date(today)
    endOfDay.setHours(23, 59, 59, 999)

    const { data: bookings } = await supabase
      .from('bookings')
      .select('*, profile:user_id(name, phone), boat:boat_id(name)')
      .eq('status', 'confirmed')
      .gte('start_time', startOfDay.toISOString())
      .lte('start_time', endOfDay.toISOString())
      .order('start_time', { ascending: true })

    if (!bookings || bookings.length === 0) {
      return await sendMessage(chatId, 'üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
    }

    let message = `üìÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${bookings.length})</b>\n\n`

    bookings.forEach((booking: any, index: number) => {
      const time = new Date(booking.start_time).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })

      message += `${index + 1}. <b>${time}</b> - ${booking.boat?.name || '–õ–æ–¥–∫–∞'}
üë§ ${booking.profile?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
üìû ${booking.profile?.phone || '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
üí∞ ${booking.price} ‚ÇΩ

`
    })

    return await sendMessage(chatId, message)
  } catch (error) {
    console.error('Error getting today bookings:', error)
    return await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async function handleSendReminders(chatId: number, event: any) {
  try {
    await sendMessage(chatId, 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...')

    // –í—ã–∑—ã–≤–∞–µ–º API –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const response = await fetch(`${getBaseUrl(event)}/api/telegram/reminders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })

    const result = await response.json()

    if (result.status === 200) {
      await sendMessage(chatId, `‚úÖ ${result.body.message}`)
    } else {
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    }
  } catch (error) {
    console.error('Error sending reminders:', error)
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL
function getBaseUrl(event: any): string {
  const host = event.node.req.headers.host
  const protocol = event.node.req.headers['x-forwarded-proto'] || 'http'
  return `${protocol}://${host}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId: number, text: string) {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return false

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML'
      })
    })

    return response.ok
  } catch (error) {
    console.error('Error sending message:', error)
    return false
  }
}
