import { defineEventHandler } from 'h3'
import { serverSupabaseClient } from '#supabase/server'

/**
 * API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
 * –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 */
export default defineEventHandler(async (event) => {
  try {
    const supabase = await serverSupabaseClient(event)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)

    const startOfDay = new Date(tomorrow)
    startOfDay.setHours(0, 0, 0, 0)

    const endOfDay = new Date(tomorrow)
    endOfDay.setHours(23, 59, 59, 999)

    const { data: bookings, error } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('status', 'confirmed')
      .gte('start_time', startOfDay.toISOString())
      .lte('start_time', endOfDay.toISOString())
      .not('profile.telegram_id', 'is', null)

    if (error) {
      console.error('Error fetching bookings for reminders:', error)
      return { status: 500, body: { error: 'Failed to fetch bookings' } }
    }

    if (!bookings || bookings.length === 0) {
      return { status: 200, body: { message: 'No bookings to remind about' } }
    }

    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      return { status: 500, body: { error: 'Telegram token not configured' } }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    const results = await Promise.all(
      bookings.map(async (booking: any) => {
        try {
          const startTime = new Date(booking.start_time)
          const formattedTime = startTime.toLocaleDateString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            day: 'numeric',
            month: 'long'
          })

          const message = `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</b>

üõ•Ô∏è –õ–æ–¥–∫–∞: <b>${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>
üìÖ –ó–∞–≤—Ç—Ä–∞, ${formattedTime}
üí∞ –¶–µ–Ω–∞: ${booking.price} ‚ÇΩ

üìç –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!
üìû –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞! üåä`

          const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: booking.profile.telegram_id,
              text: message,
              parse_mode: 'HTML'
            })
          })

          return {
            bookingId: booking.id,
            success: response.ok,
            userId: booking.profile.id
          }
        } catch (error) {
          console.error(`Failed to send reminder for booking ${booking.id}:`, error)
          return {
            bookingId: booking.id,
            success: false,
            error: error
          }
        }
      })
    )

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    console.log(`Reminders sent: ${successCount} success, ${failCount} failed`)

    return {
      status: 200,
      body: {
        message: `Sent ${successCount} reminders, ${failCount} failed`,
        results
      }
    }
  } catch (error) {
    console.error('Error in reminders endpoint:', error)
    return { status: 500, body: { error: 'Internal server error' } }
  }
})
