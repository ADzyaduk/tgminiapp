import { defineEventHandler, readBody } from 'h3'
import { serverSupabaseClient } from '#supabase/server'
import {
  formatStatusNotification,
  sendAdminNotification,
  sendClientStatusNotification
} from '~/server/utils/telegram-notifications'

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Bot
export default defineEventHandler(async (event) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    const body = await readBody(event)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è callback_query
    if (!body || !body.callback_query) {
      return { status: 400, body: { error: 'Invalid request. Expected callback_query.' } }
    }

    const { callback_query } = body
    const { data: callbackData, message, from } = callback_query

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!callbackData || !from || !message) {
      return { status: 400, body: { error: 'Invalid callback data' } }
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const supabase = await serverSupabaseClient(event)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
    if (callbackData === 'my_bookings') {
      return await handleMyBookingsCallback(message.chat.id, from, supabase, message.message_id)
    }

    if (callbackData === 'help') {
      return await handleHelpCallback(message.chat.id, message.message_id)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
    const { data: adminUser } = await supabase
      .from('profiles')
      .select('id, role')
      .eq('telegram_id', from.id.toString())
      .in('role', ['admin', 'manager'])
      .single()

    if (!adminUser) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤
      await sendTelegramResponse(
        message.chat.id,
        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
        message.message_id
      )
      return { status: 403, body: { error: 'Access denied' } }
    }

    // –†–∞–∑–±–∏—Ä–∞–µ–º callbackData —Ñ–æ—Ä–º–∞—Ç–∞ action:bookingId
    const [action, bookingId] = callbackData.split(':')

    if (!action || !bookingId) {
      await sendTelegramResponse(
        message.chat.id,
        '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞',
        message.message_id
      )
      return { status: 400, body: { error: 'Invalid callback data format' } }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    const { data: booking } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('id', bookingId)
      .single()

    if (!booking) {
      await sendTelegramResponse(
        message.chat.id,
        '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ',
        message.message_id
      )
      return { status: 404, body: { error: 'Booking not found' } }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ª–æ–¥–∫–æ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —Ç–æ–ª—å–∫–æ —Å —Ä–æ–ª—å—é manager)
    if (adminUser.role !== 'admin') {
      const { data: managerAccess } = await supabase
        .from('boat_managers')
        .select('*')
        .eq('user_id', adminUser.id)
        .eq('boat_id', booking.boat_id)
        .single()

      if (!managerAccess) {
        await sendTelegramResponse(
          message.chat.id,
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ª–æ–¥–∫–æ–π',
          message.message_id
        )
        return { status: 403, body: { error: 'Access denied for this boat' } }
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    let newStatus = ''
    let responseMessage = ''

    if (action === 'confirm_booking') {
      newStatus = 'confirmed'
      responseMessage = `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`
    } else if (action === 'cancel_booking') {
      newStatus = 'cancelled'
      responseMessage = `‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`
    } else {
      await sendTelegramResponse(
        message.chat.id,
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        message.message_id
      )
      return { status: 400, body: { error: 'Unknown action' } }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const { error: updateError } = await supabase
      .from('bookings')
      .update({
        status: newStatus,
        updated_at: new Date().toISOString(),
        updated_by: adminUser.id
      })
      .eq('id', bookingId)

    if (updateError) {
      await sendTelegramResponse(
        message.chat.id,
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        message.message_id
      )
      return { status: 500, body: { error: 'Failed to update booking' } }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const { data: updatedBooking } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('id', bookingId)
      .single()

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    const { data: managerProfile } = await supabase
      .from('profiles')
      .select('name')
      .eq('telegram_id', from.id.toString())
      .single()

    const managerName = (managerProfile as any)?.name || '–ú–µ–Ω–µ–¥–∂–µ—Ä'

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await sendTelegramResponse(
      message.chat.id,
      `${responseMessage} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${(booking as any).profile?.name || '–ù–µ—Ç –∏–º–µ–Ω–∏'} –Ω–∞ ${new Date((booking as any).start_time).toLocaleDateString('ru-RU')}`,
      message.message_id
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    if (updatedBooking) {
      try {
        console.log('üì± Sending enhanced status notification to client from callback')
        await sendClientStatusNotification(updatedBooking, newStatus, managerName)
      } catch (notifyError) {
        console.error('Failed to send notification to client:', notifyError)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try {
      const notificationMessage = formatStatusNotification(updatedBooking, newStatus)

      await sendAdminNotification(notificationMessage, {
        parseMode: 'HTML',
        boatId: (updatedBooking as any).boat_id,
        bookingId: (updatedBooking as any).id
      })
    } catch (notifyError) {
      console.error('Failed to update admin notifications:', notifyError)
    }

    return { status: 200, body: { success: true } }
  } catch (error) {
    console.error('Error in telegram callback handler:', error)
    return { status: 500, body: { error: 'Internal server error' } }
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback "my_bookings"
async function handleMyBookingsCallback(chatId: number, from: any, supabase: any, messageId: number) {
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  const { data: user } = await supabase
    .from('profiles')
    .select('id')
    .eq('telegram_id', from.id.toString())
    .single()

  if (!user) {
    const message = `‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –∫–æ–º–∞–Ω–¥–µ /start –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`

    return await sendTelegramResponse(chatId, message, messageId)
  }

  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: bookings } = await supabase
    .from('bookings')
    .select('*, boat:boat_id(name)')
    .eq('user_id', user.id)
    .order('start_time', { ascending: false })
    .limit(5)

  if (!bookings || bookings.length === 0) {
    return await sendTelegramResponse(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É.', messageId)
  }

  let message = 'üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n'

  bookings.forEach((booking: any, index: number) => {
    const statusEmoji: Record<string, string> = {
      pending: '‚è≥',
      confirmed: '‚úÖ',
      cancelled: '‚ùå'
    }

    const emoji = statusEmoji[booking.status] || 'üîî'

    const date = new Date(booking.start_time).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit'
    })

    message += `${index + 1}. ${emoji} <b>${booking.boat?.name || '–õ–æ–¥–∫–∞'}</b>
üìÖ ${date}
üí∞ ${booking.price} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: ${booking.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' : booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–û—Ç–º–µ–Ω–µ–Ω–æ'}

`
  })

  message += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.'

  return await sendTelegramResponse(chatId, message, messageId)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback "help"
async function handleHelpCallback(chatId: number, messageId: number) {
  const message = `üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/mybookings - –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/boats - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–¥–æ–∫

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π

üì± <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`

  return await sendTelegramResponse(chatId, message, messageId)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram
async function sendTelegramResponse(chatId: number, text: string, messageId?: number): Promise<boolean> {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return false

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    const method = messageId ? 'editMessageText' : 'sendMessage'
    const apiUrl = `https://api.telegram.org/bot${token}/${method}`

    const payload: any = {
      chat_id: chatId,
      text,
      parse_mode: 'HTML'
    }

    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ–≥–æ ID
    if (messageId) {
      payload.message_id = messageId
    }

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    return response.ok
  } catch (error) {
    console.error('Error sending telegram response:', error)
    return false
  }
}
