import { defineEventHandler, readBody } from 'h3'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    const { chat_id, booking_id, booking_type = 'regular' } = body

    if (!chat_id || !booking_id) {
      return { error: 'chat_id and booking_id are required' }
    }

    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      return { error: 'Telegram bot token not configured' }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const message = `üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.

üÜî <b>Booking ID:</b> ${booking_id}
üìã <b>–¢–∏–ø:</b> ${booking_type === 'regular' ? '–û–±—ã—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞'}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`

    const replyMarkup = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            callback_data: `confirm_${booking_type}_${booking_id}`
          },
          {
            text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
            callback_data: `cancel_${booking_type}_${booking_id}`
          }
        ]
      ]
    }

    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chat_id,
        text: message,
        parse_mode: 'HTML',
        reply_markup: replyMarkup
      })
    })

    const result = await response.json()

    if (result.ok) {
      return {
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        telegram_response: result
      }
    } else {
      return {
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
        details: result
      }
    }

  } catch (error) {
    console.error('Error sending test notification:', error)
    return { error: 'Internal server error', details: error }
  }
})
