import { defineEventHandler, readBody, setResponseStatus } from 'h3'
import { serverSupabaseClient } from '#supabase/server'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    if (body.callback_query) {
      const callbackQuery = body.callback_query
      const callbackData = callbackQuery.data
      const messageId = callbackQuery.message.message_id
      const chatId = callbackQuery.message.chat.id
      const from = callbackQuery.from

      console.log('üì± Received callback query:', callbackData)

      // –ü–∞—Ä—Å–∏–º callback_data: confirm_regular_123 –∏–ª–∏ cancel_group_trip_456
      const [action, bookingType, bookingId] = callbackData.split('_')

      if (!action || !bookingType || !bookingId) {
        console.error('Invalid callback data format:', callbackData)
        return { ok: true }
      }

      const supabase = await serverSupabaseClient(event)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
      const { data: adminUser } = await supabase
        .from('profiles')
        .select('id, role')
        .eq('telegram_id', from.id.toString())
        .in('role', ['admin', 'manager'])
        .single()

      if (!adminUser) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤
        await sendTelegramMessage(
          chatId,
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
          messageId
        )
        return { ok: true }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –ª–æ–¥–∫—É
      let booking: any = null
      if (bookingType === 'regular') {
        const { data } = await supabase
          .from('bookings')
          .select('boat_id')
          .eq('id', bookingId)
          .single()
        booking = data
      } else if (bookingType === 'group_trip') {
        const { data } = await supabase
          .from('group_trip_bookings')
          .select('group_trip:group_trips(boat_id)')
          .eq('id', bookingId)
          .single()
        booking = data ? { boat_id: (data as any).group_trip?.boat_id } : null
      }

      if (!booking) {
        await sendTelegramMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', messageId)
        return { ok: true }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ª–æ–¥–∫–æ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —Ç–æ–ª—å–∫–æ —Å —Ä–æ–ª—å—é manager)
      if ((adminUser as any).role !== 'admin') {
        const { data: managerAccess } = await supabase
          .from('boat_managers')
          .select('*')
          .eq('user_id', (adminUser as any).id)
          .eq('boat_id', booking.boat_id)
          .single()

        if (!managerAccess) {
          await sendTelegramMessage(
            chatId,
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ª–æ–¥–∫–æ–π',
            messageId
          )
          return { ok: true }
        }
      }

      if (bookingType === 'regular') {
        await handleRegularBookingAction(supabase, action, bookingId, chatId, messageId, (adminUser as any).id)
      } else if (bookingType === 'group_trip') {
        await handleGroupTripBookingAction(supabase, action, bookingId, chatId, messageId)
      }
    }

    return { ok: true }
  } catch (error) {
    console.error('Error processing Telegram webhook:', error)
    setResponseStatus(event, 500)
    return { error: 'Internal server error' }
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function handleRegularBookingAction(
  supabase: any,
  action: string,
  bookingId: string,
  chatId: string,
  messageId: string,
  updatedBy: string
) {
  try {
    const newStatus = action === 'confirm' ? 'confirmed' : 'cancelled'

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: booking, error: fetchError } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('id', bookingId)
      .single()

    if (fetchError || !booking) {
      await sendTelegramMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', messageId)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const { error: updateError } = await supabase
      .from('bookings')
      .update({
        status: newStatus,
        updated_at: new Date().toISOString(),
        updated_by: updatedBy
      })
      .eq('id', bookingId)

    if (updateError) {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', messageId)
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    const { data: fullBooking } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('id', bookingId)
      .single()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    if (fullBooking?.profile?.telegram_id) {
      const { sendClientStatusNotification } = await import('~/server/utils/telegram-notifications')
      await sendClientStatusNotification(fullBooking, newStatus, '–ú–µ–Ω–µ–¥–∂–µ—Ä')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const statusText = action === 'confirm' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'
    const emoji = action === 'confirm' ? '‚úÖ' : '‚ùå'
    await sendTelegramMessage(
      chatId,
      `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${booking.profile?.name || '–ù–µ—Ç –∏–º–µ–Ω–∏'} –Ω–∞ ${new Date(booking.start_time).toLocaleDateString('ru-RU')}`,
      messageId
    )

  } catch (error) {
    console.error('Error handling regular booking action:', error)
    await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', messageId)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫
async function handleGroupTripBookingAction(
  supabase: any,
  action: string,
  bookingId: string,
  chatId: string,
  messageId: string
) {
  try {
    const newStatus = action === 'confirm' ? 'confirmed' : 'cancelled'

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
    const { data: booking, error: fetchError } = await supabase
      .from('group_trip_bookings')
      .select('*, group_trip:group_trips(*, boat:boats(*))')
      .eq('id', bookingId)
      .single()

    if (fetchError || !booking) {
      await sendTelegramMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', messageId)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const { error: updateError } = await supabase
      .from('group_trip_bookings')
      .update({ status: newStatus })
      .eq('id', bookingId)

    if (updateError) {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', messageId)
      return
    }

    // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Å—Ç–∞ –≤ –ø–æ–µ–∑–¥–∫—É
    if (action === 'cancel') {
      const totalTickets = booking.adult_count + booking.child_count
      await supabase
        .from('group_trips')
        .update({
          available_seats: booking.group_trip.available_seats + totalTickets
        })
        .eq('id', booking.group_trip_id)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å)
    if (booking.user_id) {
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', booking.user_id)
        .single()

      if (profile?.telegram_id) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const bookingWithDetails = {
          ...booking,
          profile: profile,
          boat: booking.group_trip.boat
        }

        if (action === 'confirm') {
          const { sendGroupTripBookingConfirmation } = await import('~/server/utils/telegram-notifications')
          await sendGroupTripBookingConfirmation(bookingWithDetails)
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
          await sendGroupTripCancellationNotification(bookingWithDetails)
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const statusText = action === 'confirm' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'
    const emoji = action === 'confirm' ? '‚úÖ' : '‚ùå'
    await sendTelegramMessage(
      chatId,
      `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ ${statusText}!`,
      messageId
    )

  } catch (error) {
    console.error('Error handling group trip booking action:', error)
    await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', messageId)
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTelegramMessage(chatId: string, text: string, messageId?: string) {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return

    const url = messageId
      ? `https://api.telegram.org/bot${token}/editMessageText`
      : `https://api.telegram.org/bot${token}/sendMessage`

    const body: any = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    }

    if (messageId) {
      body.message_id = messageId
    }

    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    })
  } catch (error) {
    console.error('Error sending Telegram message:', error)
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
async function sendGroupTripCancellationNotification(booking: any) {
  try {
    const message = `‚ùå <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é –ø–æ–µ–∑–¥–∫—É –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.

üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë• <b>–ë–∏–ª–µ—Ç—ã:</b> ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.total_price} ‚ÇΩ

üìû <i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</i>`

    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return

    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })
  } catch (error) {
    console.error('Error sending group trip cancellation notification:', error)
  }
}
