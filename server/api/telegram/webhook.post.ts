import { defineEventHandler, readBody } from 'h3'
import { serverSupabaseServiceRole } from '#supabase/server'
import type { H3Event } from 'h3'
import type { Database } from '~/types/supabase'

type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']

// NOTE: The type below is enhanced to include fields that are used in the code but seem
// to be missing from the auto-generated `types/supabase.ts`. This suggests the types file
// might be out of sync with the actual database schema. Regenerating the types is recommended.
type BookingWithDetails = Tables<'bookings'> & {
  profile: (Tables<'profiles'> & { username?: string; first_name?: string; last_name?: string }) | null
  boat: Tables<'boats'> | null
  date?: string
  time?: string
  duration?: number
  people_count?: number
}

/**
 * –í–†–ï–ú–ï–ù–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú –° API TELEGRAM
 *
 * –≠—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:
 * 1. answerCallbackQuery - —É–±–∏—Ä–∞–µ—Ç "–∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–Ω–æ–ø–∫–∏.
 * 2. editMessageText - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏.
 * 3. sendMessage - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 *
 * –û–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
 */

// #region Telegram API Helpers
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã –∫ API Telegram

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ Telegram. –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ.
 * @param callbackQueryId ID –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
 * @param text –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  // –í—ã–ø–æ–ª–Ω—è–µ–º "–≤ —Ñ–æ–Ω–µ", –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
  sendTelegramRequest('answerCallbackQuery', {
    callback_query_id: callbackQueryId,
    text: text || '',
  }).catch(e => console.error('Failed to answer callback query in background:', e));
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram Bot API.
 * @param method –ú–µ—Ç–æ–¥ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'editMessageText')
 * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
 */
async function sendTelegramRequest(method: string, body: object) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error(`‚ùå TELEGRAM_BOT_TOKEN is not set. Cannot call method '${method}'.`);
    return;
  }
  const url = `https://api.telegram.org/bot${token}/${method}`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    if (!response.ok) {
      console.error(`‚ùå Telegram API error for method '${method}': ${response.status} ${response.statusText}`, await response.text());
    }
    return await response.json();
  } catch (error) {
    console.error(`‚ùå Network error calling Telegram API method '${method}':`, error);
    throw error;
  }
}

// #endregion

// #region Main Handler
export default defineEventHandler(async (event: H3Event) => {
  try {
    const body = await readBody(event);

    if (!body.callback_query) {
      return { statusCode: 200, statusMessage: 'OK (not a callback query)' };
    }

    const { callback_query } = body;
    const { id: callbackQueryId, data: callbackData, message, from } = callback_query;

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
    await answerCallbackQuery(callbackQueryId);

    const [bookingType, action, bookingId] = callbackData.split(':');

    if (!bookingType || !action || !bookingId) {
      console.error('‚ùå Invalid callback data format:', callbackData);
      return { statusCode: 400, statusMessage: 'Invalid callback_data format.' };
    }

    // –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 'regular'
    if (bookingType === 'regular') {
      await handleRegularBooking(event, {
        bookingId,
        action,
        managerChatId: message.chat.id.toString(),
        messageId: message.message_id.toString(),
        managerTelegramId: from.id.toString(),
        callbackQueryId,
      });
    } else {
      console.warn(`‚ö†Ô∏è Unsupported booking type: ${bookingType}`);
    }

    return { statusCode: 200, statusMessage: 'OK' };
  } catch (error) {
    console.error('‚ùå Unhandled error in webhook handler:', error);
    return { statusCode: 500, statusMessage: 'Internal Server Error' };
  }
});
// #endregion

// #region Booking Logic
interface BookingContext {
  bookingId: string;
  action: 'confirm' | 'cancel' | string;
  managerChatId: string;
  messageId: string;
  managerTelegramId: string;
  callbackQueryId: string;
}

async function handleRegularBooking(event: H3Event, ctx: BookingContext) {
  const supabase = serverSupabaseServiceRole<Database>(event);

  // 1. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
  const { data: booking, error: fetchError } = await supabase
    .from('bookings')
    .select('*, profile:profiles(*), boat:boats(*)')
    .eq('id', ctx.bookingId)
    .single();

  if (fetchError || !booking) {
    console.error(`üö® Booking not found or fetch error for ID ${ctx.bookingId}:`, fetchError);
    await answerCallbackQuery(ctx.callbackQueryId, 'üö® –û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    // –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–∞–∑–∞–≤ —á—Ç–æ –±—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await updateManagerMessage(ctx, 'not_found');
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
  if (booking.status !== 'pending') {
    await answerCallbackQuery(ctx.callbackQueryId, `–≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: ${booking.status}).`);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–∞–º –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    await updateManagerMessage(ctx, booking.status, booking);
    return;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
  // const hasPermission = await checkUserPermissions(supabase, ctx.managerTelegramId, booking);
  // if (!hasPermission) {
  //   await answerCallbackQuery(ctx.callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
  //   return;
  // }

  // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  const newStatus = ctx.action === 'confirm' ? 'confirmed' : 'cancelled';
  const { error: updateError } = await supabase
    .from('bookings')
    .update({ status: newStatus })
    .eq('id', ctx.bookingId);

  if (updateError) {
    console.error(`üö® DB update error for booking ${ctx.bookingId}:`, updateError);
    await answerCallbackQuery(ctx.callbackQueryId, 'üö® –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!');
    return;
  }

  // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –ø–∏—à–µ–º —Å—Ç–∞—Ç—É—Å)
  await updateManagerMessage(ctx, newStatus, booking);

  // 6. –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  const { sendClientStatusNotification } = await import('~/server/utils/telegram-notifications');
  await sendClientStatusNotification(booking, newStatus);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –µ–≥–æ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
 */
async function updateManagerMessage(ctx: BookingContext, status: string, booking?: any) {
  const statusMap: Record<string, { text: string; emoji: string }> = {
    confirmed: { text: '–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û', emoji: '‚úÖ' },
    cancelled: { text: '–û–¢–ú–ï–ù–ï–ù–û', emoji: '‚ùå' },
    pending: { text: '–û–ñ–ò–î–ê–ï–¢', emoji: '‚è≥' },
    not_found: { text: '–ù–ï –ù–ê–ô–î–ï–ù–û', emoji: '‚ùì' },
  };

  const { text: statusText, emoji } = statusMap[status] || { text: status.toUpperCase(), emoji: '‚ö†Ô∏è' };

  let messageBody: string;
  if (booking) {
    const clientName = (booking.profile?.first_name || '') + ' ' + (booking.profile?.last_name || '');
    const clientTelegram = booking.profile?.username ? `@${booking.profile.username}` : 'N/A';
    messageBody = [
        `üõ•Ô∏è <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
        `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName.trim() || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`,
        `üìû <b>Telegram:</b> ${clientTelegram}`,
        `üìÖ <b>–î–∞—Ç–∞:</b> ${booking.date}`,
        `‚è∞ <b>–í—Ä–µ–º—è:</b> ${booking.time}`,
        `‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${booking.duration} —á.`,
        `üë• <b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> ${booking.people_count}`,
    ].join('\n');
  } else {
    messageBody = `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID: ${ctx.bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ.`;
  }

  const fullMessage = `${emoji} <b>–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ${statusText}</b> ${emoji}\n\n${messageBody}`;

  await sendTelegramRequest('editMessageText', {
    chat_id: ctx.managerChatId,
    message_id: parseInt(ctx.messageId, 10),
    text: fullMessage,
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: [] }, // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
  });
}
// #endregion
