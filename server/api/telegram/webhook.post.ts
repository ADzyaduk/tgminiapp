import { serverSupabaseServiceRole } from '#supabase/server'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return

    const url = `https://api.telegram.org/bot${token}/answerCallbackQuery`

    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text || ''
      })
    })
  } catch (error) {
    console.error('Error answering callback query:', error)
  }
}

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if (!body.callback_query) {
      return { status: 200 }
    }

    const { callback_query } = body
    const { id: callbackQueryId, data: callbackData, message, from } = callback_query
    const chatId = message.chat.id.toString()
    const messageId = message.message_id.toString()

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading"
    await answerCallbackQuery(callbackQueryId)

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    const [bookingType, action, bookingId] = callbackData.split(':')

    if (!['regular', 'group_trip'].includes(bookingType) || !['confirm', 'cancel'].includes(action)) {
      await sendTelegramMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
      return { status: 400 }
    }

    const supabase = serverSupabaseServiceRole(event)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userTelegramId = from.id.toString()
    const hasPermission = await checkUserPermissions(supabase, userTelegramId, bookingType, bookingId)

    if (!hasPermission) {
      await sendTelegramMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º')
      return { status: 403 }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if (bookingType === 'regular') {
      await handleRegularBooking(supabase, action, bookingId, chatId, messageId)
    } else {
      await handleGroupTripBooking(supabase, action, bookingId, chatId, messageId)
    }

    return { status: 200 }

  } catch (error) {
    console.error('Webhook error:', error)
    return { status: 500 }
  }
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserPermissions(supabase: any, telegramId: string, bookingType: string, bookingId: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const { data: user } = await supabase
      .from('profiles')
      .select('id, role')
      .eq('telegram_id', telegramId)
      .single()

    if (!user) return false

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –∞–≥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if (['admin', 'agent'].includes(user.role)) {
      return true
    }

    // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ª–æ–¥–∫–µ
    if (user.role === 'manager') {
      let boatId: string | null = null

      if (bookingType === 'regular') {
        const { data: booking } = await supabase
          .from('bookings')
          .select('boat_id')
          .eq('id', bookingId)
          .single()
        boatId = booking?.boat_id
      } else {
        const { data: booking } = await supabase
          .from('group_trip_bookings')
          .select('group_trip:group_trips(boat_id)')
          .eq('id', bookingId)
          .single()
        boatId = booking?.group_trip?.boat_id
      }

      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è - –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ª–æ–¥–∫–∞–º
      if (boatId) {
        return true
      }
    }

    return false
  } catch (error) {
    console.error('Permission check error:', error)
    return false
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function handleRegularBooking(supabase: any, action: string, bookingId: string, chatId: string, messageId: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: booking, error } = await supabase
      .from('bookings')
      .select(`
        *,
        profile:profiles!bookings_user_id_fkey(name, telegram_id, phone, email),
        boat:boats!bookings_boat_id_fkey(name)
      `)
      .eq('id', bookingId)
      .single()

    if (error || !booking) {
      await sendTelegramMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', messageId)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if (booking.status !== 'pending') {
      const statusText = booking.status === 'confirmed' ? '—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '—É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      const emoji = booking.status === 'confirmed' ? '‚úÖ' : '‚ùå'

      await sendTelegramMessage(
        chatId,
        `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}`,
        messageId
      )
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const newStatus = action === 'confirm' ? 'confirmed' : 'cancelled'
    const { error: updateError } = await supabase
      .from('bookings')
      .update({ status: newStatus })
      .eq('id', bookingId)

    if (updateError) {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', messageId)
      return
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    console.log('üîç Booking data:', {
      user_id: booking.user_id,
      profile: booking.profile,
      telegram_id: booking.profile?.telegram_id
    })

    if (booking.profile?.telegram_id) {
      console.log(`üì± Sending notification to client: ${booking.profile.telegram_id}`)
      await notifyClient(booking.profile.telegram_id, newStatus, booking)
    } else {
      console.log('‚ùå No telegram_id found for client notification')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const statusText = action === 'confirm' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'
    const emoji = action === 'confirm' ? '‚úÖ' : '‚ùå'

    console.log(`üîÑ Updating manager message in chat ${chatId}, message ${messageId}`)
    const updateResult = await sendTelegramMessage(
      chatId,
      `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText}\n\n–ö–ª–∏–µ–Ω—Ç: ${booking.profile?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–î–∞—Ç–∞: ${new Date(booking.start_time).toLocaleDateString('ru-RU')}`,
      messageId
    )

    if (updateResult) {
      console.log('‚úÖ Successfully updated manager message and removed buttons')
    } else {
      console.log('‚ùå Failed to update manager message')
    }

  } catch (error) {
    console.error('Regular booking error:', error)
    await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', messageId)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function handleGroupTripBooking(supabase: any, action: string, bookingId: string, chatId: string, messageId: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: booking, error } = await supabase
      .from('group_trip_bookings')
      .select(`
        *,
        group_trip:group_trips(boat_id, start_date, name),
        profile:profiles!group_trip_bookings_user_id_fkey(name, telegram_id, phone, email)
      `)
      .eq('id', bookingId)
      .single()

    if (error || !booking) {
      await sendTelegramMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', messageId)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (booking.status !== 'pending') {
      const statusText = booking.status === 'confirmed' ? '—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '—É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      const emoji = booking.status === 'confirmed' ? '‚úÖ' : '‚ùå'

      await sendTelegramMessage(
        chatId,
        `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ ${statusText}`,
        messageId
      )
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const newStatus = action === 'confirm' ? 'confirmed' : 'cancelled'
    const { error: updateError } = await supabase
      .from('group_trip_bookings')
      .update({ status: newStatus })
      .eq('id', bookingId)

    if (updateError) {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', messageId)
      return
    }

    // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Å—Ç–∞
    if (action === 'cancel') {
      const totalTickets = booking.adult_count + booking.child_count
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
      const { data: currentTrip } = await supabase
        .from('group_trips')
        .select('available_seats')
        .eq('id', booking.group_trip_id)
        .single()

      if (currentTrip) {
        await supabase
          .from('group_trips')
          .update({
            available_seats: currentTrip.available_seats + totalTickets
          })
          .eq('id', booking.group_trip_id)
      }
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å)
    console.log('üîç Group booking data:', {
      user_id: booking.user_id,
      profile: booking.profile,
      telegram_id: booking.profile?.telegram_id
    })

    if (booking.profile?.telegram_id) {
      console.log(`üì± Sending group trip notification to client: ${booking.profile.telegram_id}`)
      await notifyGroupTripClient(booking.profile.telegram_id, newStatus, booking)
    } else {
      console.log('‚ùå No telegram_id found for group trip client notification')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const statusText = action === 'confirm' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'
    const emoji = action === 'confirm' ? '‚úÖ' : '‚ùå'

    await sendTelegramMessage(
      chatId,
      `${emoji} –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ ${statusText}`,
      messageId
    )

  } catch (error) {
    console.error('Group trip booking error:', error)
    await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', messageId)
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function notifyClient(telegramId: string, status: string, booking: any) {
  try {
    console.log(`üì§ Attempting to notify client ${telegramId} about status ${status}`)

    const emoji = status === 'confirmed' ? '‚úÖ' : '‚ùå'
    const statusText = status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'

    const message = `${emoji} <b>–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω</b>

–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${statusText} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(booking.start_time).toLocaleDateString('ru-RU')}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(booking.start_time).toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})} - ${new Date(booking.end_time).toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}
üö§ <b>–õ–æ–¥–∫–∞:</b> ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.price} ‚ÇΩ`

    const result = await sendTelegramMessage(telegramId, message)
    if (result) {
      console.log(`‚úÖ Successfully notified client ${telegramId}`)
    } else {
      console.log(`‚ùå Failed to notify client ${telegramId}`)
    }
  } catch (error) {
    console.error(`‚ùå Client notification error for ${telegramId}:`, error)
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
async function notifyGroupTripClient(telegramId: string, status: string, booking: any) {
  try {
    const emoji = status === 'confirmed' ? '‚úÖ' : '‚ùå'
    const statusText = status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–æ—Ç–º–µ–Ω–µ–Ω–æ'

    const message = `${emoji} <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ ${statusText}</b>

–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ ${statusText} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

üë• <b>–ë–∏–ª–µ—Ç—ã:</b> ${booking.adult_count} –≤–∑—Ä. + ${booking.child_count} –¥–µ—Ç.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.total_price} ‚ÇΩ`

    await sendTelegramMessage(telegramId, message)
  } catch (error) {
    console.error('Group trip client notification error:', error)
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
async function sendTelegramMessage(chatId: string, text: string, messageId?: string): Promise<boolean> {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) {
      console.error('TELEGRAM_BOT_TOKEN not set')
      return false
    }

    const url = messageId
      ? `https://api.telegram.org/bot${token}/editMessageText`
      : `https://api.telegram.org/bot${token}/sendMessage`

    const body: any = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    }

    // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if (messageId) {
      body.message_id = messageId
      body.reply_markup = { inline_keyboard: [] }
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    })

    if (!response.ok) {
      const errorData = await response.json()
      console.error('Telegram API error:', errorData)
      return false
    }

    return true

  } catch (error) {
    console.error('Send message error:', error)
    return false
  }
}
