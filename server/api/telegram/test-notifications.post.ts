import { defineEventHandler, readBody, setResponseStatus } from 'h3'
import { serverSupabaseServiceRole } from '#supabase/server'

// –¢–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Bot API
interface TestNotificationRequest {
  type: 'booking_confirmation' | 'status_change' | 'reminder' | 'admin_notification'
  bookingId?: string
  userId?: string
  status?: 'confirmed' | 'cancelled' | 'pending'
  managerName?: string
  hours?: number
  message?: string
}

/**
 * API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export default defineEventHandler(async (event) => {
  try {
    const body: TestNotificationRequest = await readBody(event)
    const { type, bookingId, status, managerName, hours, message } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const telegramToken = process.env.TELEGRAM_BOT_TOKEN
    if (!telegramToken) {
      setResponseStatus(event, 500)
      return {
        success: false,
        error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const {
      sendClientBookingConfirmation,
      sendClientStatusNotification,
      sendBookingReminder,
      sendAdminNotification
    } = await import('~/server/utils/telegram-notifications')

    const supabase = serverSupabaseServiceRole(event)

    switch (type) {
      case 'booking_confirmation':
        if (!bookingId) {
          setResponseStatus(event, 400)
          return { success: false, error: 'bookingId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
        }

        const { data: booking } = await supabase
          .from('bookings')
          .select('*, profile:profiles(*), boat:boats(*)')
          .eq('id', bookingId)
          .single()

        if (!booking) {
          setResponseStatus(event, 404)
          return { success: false, error: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }
        }

        const result = await sendClientBookingConfirmation(booking)
        return {
          success: result,
          message: result ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        }

      case 'status_change':
        if (!bookingId || !status) {
          setResponseStatus(event, 400)
          return { success: false, error: 'bookingId –∏ status –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
        }

        const { data: statusBooking } = await supabase
          .from('bookings')
          .select('*, profile:profiles(*), boat:boats(*)')
          .eq('id', bookingId)
          .single()

        if (!statusBooking) {
          setResponseStatus(event, 404)
          return { success: false, error: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }
        }

        const statusResult = await sendClientStatusNotification(statusBooking, status, managerName)
        return {
          success: statusResult,
          message: statusResult ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        }

      case 'reminder':
        if (!bookingId) {
          setResponseStatus(event, 400)
          return { success: false, error: 'bookingId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
        }

        const { data: reminderBooking } = await supabase
          .from('bookings')
          .select('*, profile:profiles(*), boat:boats(*)')
          .eq('id', bookingId)
          .single()

        if (!reminderBooking) {
          setResponseStatus(event, 404)
          return { success: false, error: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }
        }

        const reminderResult = await sendBookingReminder(reminderBooking, hours || 2)
        return {
          success: reminderResult,
          message: reminderResult ? '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
        }

      case 'admin_notification':
        const testMessage = message || `üîî <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`

        const adminResult = await sendAdminNotification(testMessage, {
          parseMode: 'HTML',
          bookingId,
          event
        })

        return {
          success: adminResult,
          message: adminResult ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        }

      default:
        setResponseStatus(event, 400)
        return {
          success: false,
          error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        }
    }

  } catch (error: any) {
    console.error('‚ùå Test notification error:', error)
    setResponseStatus(event, 500)
    return {
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }
  }
})
