import { defineEventHandler, readBody, getQuery } from 'h3'
import { serverSupabaseClient } from '#supabase/server'

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook
export default defineEventHandler(async (event) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (event.method !== 'POST') {
    return { status: 405, body: { error: 'Method not allowed' } }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  const body = await readBody(event)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!body || !body.message) {
    return { status: 400, body: { error: 'Invalid request' } }
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
  const { message } = body
  const { chat, text, from } = message

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
  const supabase = await serverSupabaseClient(event)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
  if (text && !text.startsWith('/')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É
    const { data: existingUser } = await supabase
      .from('profiles')
      .select('id')
      .eq('telegram_id', from.id.toString())
      .single()

    if (!existingUser) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      return await handleStartCommand(chat.id, from, supabase)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text && text.startsWith('/')) {
    const command = text.split(' ')[0].toLowerCase()

    switch (command) {
      case '/start':
        return await handleStartCommand(chat.id, from, supabase)

      case '/help':
        return await handleHelpCommand(chat.id)

      default:
        return await sendMessage(chat.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')
    }
  }

  return { status: 200, body: { success: true } }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(chatId: number, from: any, supabase: any) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userResult = await saveTelegramUser(from, supabase)

  let message = ''

  if (userResult && userResult.id) {
    if (userResult.role === 'telegram_only') {
      // Telegram-only –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
      message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫!

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É.

üì± –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫–∏ –ë–ï–ó —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ Telegram
‚Ä¢ –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

üîî –í–∞—à Telegram ID: <code>${from.id}</code> (–≥–æ—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)

üí° –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É`
    } else {
      // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫!

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É.

üì± –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ª–æ–¥–∫—É –∏ –≤—Ä–µ–º—è
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫

üîî –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ Telegram!

üÜî –í–∞—à Telegram ID: <code>${from.id}</code> (—Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º ${userResult.email})`
    }
  } else {
    // –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫!

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üöÄ –í—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:`
  }

  return await sendWebAppButton(chatId, message, 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelpCommand(chatId: number) {
  const message = `ü§ñ <b>–ë–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫</b>

üöÄ <b>–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</b>
–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚úÖ
‚Ä¢ –û—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚ùå
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π üìÖ

üì± –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`

  return await sendMessage(chatId, message)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mybookings
async function handleMyBookingsCommand(chatId: number, from: any, supabase: any) {
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  const { data: user } = await supabase
    .from('profiles')
    .select('id')
    .eq('telegram_id', from.id.toString())
    .single()

  if (!user) {
    const message = `‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –∫–æ–º–∞–Ω–¥–µ /start –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.`

    return await sendMessage(chatId, message)
  }

  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: bookings } = await supabase
    .from('bookings')
    .select('*, boat:boat_id(name)')
    .eq('user_id', user.id)
    .order('start_time', { ascending: false })
    .limit(5)

  if (!bookings || bookings.length === 0) {
    return await sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É.')
  }

  let message = 'üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n'

  bookings.forEach((booking: any, index: number) => {
    const statusEmoji: Record<string, string> = {
      pending: '‚è≥',
      confirmed: '‚úÖ',
      cancelled: '‚ùå'
    }

    const emoji = statusEmoji[booking.status] || 'üîî'

    const date = new Date(booking.start_time).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit'
    })

    message += `${index + 1}. ${emoji} <b>${booking.boat?.name || '–õ–æ–¥–∫–∞'}</b>
üìÖ ${date}
üí∞ ${booking.price} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: ${booking.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' : booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–û—Ç–º–µ–Ω–µ–Ω–æ'}

`
  })

  message += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.'

  return await sendMessage(chatId, message)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
async function handleStatusCommand(chatId: number, from: any, supabase: any) {
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  const { data: user } = await supabase
    .from('profiles')
    .select('id')
    .eq('telegram_id', from.id.toString())
    .single()

  if (!user) {
    return await sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.')
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { data: booking } = await supabase
    .from('bookings')
    .select('*, boat:boat_id(name)')
    .eq('user_id', user.id)
    .order('created_at', { ascending: false })
    .limit(1)
    .single()

  if (!booking) {
    return await sendMessage(chatId, 'üìã –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.')
  }

  const statusEmoji: Record<string, string> = {
    pending: '‚è≥',
    confirmed: '‚úÖ',
    cancelled: '‚ùå'
  }

  const emoji = statusEmoji[booking.status] || 'üîî'

  const date = new Date(booking.start_time).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  })

  const message = `${emoji} <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

üõ•Ô∏è –õ–æ–¥–∫–∞: ${booking.boat?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –î–∞—Ç–∞: ${date}
üí∞ –¶–µ–Ω–∞: ${booking.price} ‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: ${booking.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' : booking.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–û—Ç–º–µ–Ω–µ–Ω–æ'}

${booking.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' : ''}
${booking.status === 'confirmed' ? '‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –£–≤–∏–¥–∏–º—Å—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.' : ''}
${booking.status === 'cancelled' ? '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.' : ''}`

  return await sendMessage(chatId, message)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /boats
async function handleBoatsCommand(chatId: number, supabase: any) {
  const { data: boats } = await supabase
    .from('boats')
    .select('*')
    .eq('active', true)
    .order('name')

  if (!boats || boats.length === 0) {
    return await sendMessage(chatId, 'üõ•Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–æ–¥–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.')
  }

  let message = 'üõ•Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–¥–∫–∏:</b>\n\n'

  boats.forEach((boat: any, index: number) => {
    message += `${index + 1}. <b>${boat.name}</b>
üí∞ –û—Ç ${boat.price} ‚ÇΩ/—á–∞—Å
üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${boat.capacity} —á–µ–ª–æ–≤–µ–∫
${boat.description ? `üìù ${boat.description}` : ''}

`
  })

  message += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É.'

  return await sendMessage(chatId, message)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π WebApp
async function sendWebAppButton(chatId: number, text: string, buttonText: string) {
  const token = process.env.TELEGRAM_BOT_TOKEN
  const webAppUrl = process.env.TELEGRAM_WEBAPP_URL || 'https://your-app-url.com'

  const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: buttonText,
          web_app: { url: webAppUrl }
        }
      ]
    ]
  }

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: keyboard
      })
    })

    const data = await response.json()
    return { status: 200, body: data }
  } catch (error) {
    console.error('Error sending message to Telegram:', error)
    return { status: 500, body: { error: 'Failed to send message' } }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId: number, text: string) {
  const token = process.env.TELEGRAM_BOT_TOKEN
  const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      })
    })

    const data = await response.json()
    return { status: 200, body: data }
  } catch (error) {
    console.error('Error sending message to Telegram:', error)
    return { status: 500, body: { error: 'Failed to send message' } }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveTelegramUser(from: any, supabase: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
    const { data: existingUser } = await supabase
      .from('profiles')
      .select('id, name, email, role')
      .eq('telegram_id', from.id.toString())
      .single()

    if (existingUser) {
      console.log(`Existing user found: ${existingUser.name || existingUser.email}`)
      return existingUser
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ü–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ telegram_only —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const { data: newUser, error } = await supabase
      .from('profiles')
      .insert({
        telegram_id: from.id.toString(),
        name: `${from.first_name || ''} ${from.last_name || ''}`.trim() || from.username || 'Telegram User',
        email: from.username ? `${from.username}@telegram.local` : `telegram_${from.id}@local`,
        role: 'telegram_only' // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è Telegram-only –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      })
      .select()
      .single()

    if (error) {
      console.error('Error creating telegram user:', error)
      return null
    } else {
      console.log(`Created new telegram-only user with ID ${from.id}`)
      return newUser
    }
  } catch (error) {
    console.error('Error in saveTelegramUser:', error)
    return null
  }
}
