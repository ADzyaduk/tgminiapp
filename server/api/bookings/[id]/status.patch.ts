import { defineEventHandler, readBody, getRouterParam } from 'h3'
import { serverSupabaseClient, serverSupabaseUser } from '#supabase/server'
import {
  formatStatusNotification,
  sendAdminNotification,
  sendClientStatusNotification
} from '~/server/utils/telegram-notifications'

export default defineEventHandler(async (event) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const bookingId = getRouterParam(event, 'id')

    if (!bookingId) {
      return {
        status: 400,
        body: { error: 'Booking ID is required' }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { status } = await readBody(event)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    const validStatuses = ['pending', 'confirmed', 'cancelled']
    if (!validStatuses.includes(status)) {
      return {
        status: 400,
        body: { error: 'Invalid status. Valid values: pending, confirmed, cancelled' }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await serverSupabaseUser(event)
    if (!user) {
      return {
        status: 401,
        body: { error: 'Unauthorized' }
      }
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase
    const supabase = await serverSupabaseClient(event)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: currentBooking } = await supabase
      .from('bookings')
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .eq('id', bookingId)
      .single()

    if (!currentBooking) {
      return {
        status: 404,
        body: { error: 'Booking not found' }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–¥–∫–∏)
    const isAdmin = await checkAdminAccess(supabase, user.id)
    const isManager = await checkManagerAccess(supabase, user.id, (currentBooking as any).boat_id)

    if ((currentBooking as any).user_id !== user.id && !isAdmin && !isManager) {
      return {
        status: 403,
        body: { error: 'Access denied' }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: updatedBooking, error } = await (supabase as any)
      .from('bookings')
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', bookingId)
      .select('*, profile:user_id(*), boat:boat_id(*)')
      .single()

    if (error) {
      console.error('Error updating booking status:', error)
      return {
        status: 500,
        body: { error: 'Failed to update booking status' }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (updatedBooking) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å
        const { data: managerProfile } = await supabase
          .from('profiles')
          .select('name')
          .eq('id', user.id)
          .single()

        const managerName = (managerProfile as any)?.name || '–ú–µ–Ω–µ–¥–∂–µ—Ä'

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        console.log('üì± Sending enhanced status notification to client')
        await sendClientStatusNotification(updatedBooking, status, managerName)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        const notificationMessage = formatStatusNotification(updatedBooking, status)

        await sendAdminNotification(notificationMessage, {
          parseMode: 'HTML',
          boatId: (updatedBooking as any).boat_id,
          bookingId: (updatedBooking as any).id
        })

      } catch (notifyError) {
        console.error('Failed to send notifications:', notifyError)
      }
    }

    return {
      status: 200,
      body: updatedBooking
    }
  } catch (error) {
    console.error('Error in updating booking status:', error)
    return {
      status: 500,
      body: { error: 'Internal server error' }
    }
  }
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤
async function checkAdminAccess(supabase: any, userId: string): Promise<boolean> {
  const { data } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', userId)
    .single()

  return data?.role === 'admin'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–¥–∫–∏
async function checkManagerAccess(supabase: any, userId: string, boatId: string): Promise<boolean> {
  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', userId)
    .single()

  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
  if (profile?.role === 'admin') return true

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é manager - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
  if (profile?.role === 'manager') return true

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —ç—Ç–æ–π –ª–æ–¥–∫–∏
  const { data: boatManager, error } = await supabase
    .from('boat_managers')
    .select('*')
    .eq('user_id', userId)
    .eq('boat_id', boatId)
    .single()

  return !!boatManager
}
