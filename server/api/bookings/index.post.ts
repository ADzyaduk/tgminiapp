import { defineEventHandler, readBody } from 'h3'
import { serverSupabaseClient, serverSupabaseUser } from '#supabase/server'
import {
  formatBookingNotification,
  formatBookingNotificationEnhanced,
  sendAdminNotification,
  sendClientBookingConfirmation
} from '~/server/utils/telegram-notifications'

export default defineEventHandler(async (event) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await readBody(event)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    let user = null
    try {
      user = await serverSupabaseUser(event)
    } catch (error) {

    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase
    const supabase = await serverSupabaseClient(event)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    const { data: booking, error } = await supabase
      .from('bookings')
      .insert({
        ...body,
        user_id: user ? user.id : null, // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        status: 'pending' // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      })
      .select('*, profile:user_id(*), boat:boat_id(name)')
      .single()

    if (error) {
      console.error('Error creating booking:', error)
      return {
        status: 500,
        body: { error: 'Failed to create booking' }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (booking) {
      try {
        console.log('üìß Starting notification process for booking:', (booking as any).id)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        const notificationMessage = formatBookingNotificationEnhanced(booking)
        console.log('üìù Enhanced notification message formatted')

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        console.log('üöÄ Calling sendAdminNotification with:', {
          boatId: (booking as any).boat_id,
          bookingId: (booking as any).id,
          hasEvent: !!event
        })

        const notificationResult = await sendAdminNotification(notificationMessage, {
          parseMode: 'HTML',
          boatId: (booking as any).boat_id as string,
          bookingId: (booking as any).id as string,
          event
        })

        console.log('‚úÖ Manager notification result:', notificationResult)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å Telegram ID
        if ((booking as any).profile?.telegram_id) {
          console.log('üì± Sending booking confirmation to client:', (booking as any).profile.telegram_id)

          const clientNotificationResult = await sendClientBookingConfirmation(booking)
          console.log('‚úÖ Client confirmation result:', clientNotificationResult)
        } else {
          console.log('‚ÑπÔ∏è Client has no telegram_id, skipping client confirmation')
        }
      } catch (notifyError) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤–ª–∏—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç API
        console.error('‚ùå Failed to send notifications:', notifyError)
      }
    } else {
      console.log('‚ö†Ô∏è No booking created, skipping notifications')
    }

    return {
      status: 201,
      body: booking
    }
  } catch (error) {
    console.error('Error in booking creation:', error)
    return {
      status: 500,
      body: { error: 'Internal server error' }
    }
  }
})
