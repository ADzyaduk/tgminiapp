import { defineEventHandler, getQuery } from 'h3'
import { serverSupabaseServiceRole } from '#supabase/server'
import { sendAdminNotification } from '~/server/utils/telegram-notifications'

/**
 * API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
 * –≠—Ç–æ—Ç API –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (cron)
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: /api/cron/send-reminders?days=1
 * - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 —á–∞—Å–∞ –¥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: /api/cron/send-reminders?hours=3
 */
export default defineEventHandler(async (event) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const query = getQuery(event)
    const days = Number(query.days) || 0
    const hours = Number(query.hours) || 0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥
    if (days <= 0 && hours <= 0) {
      return {
        status: 400,
        body: { error: '–£–∫–∞–∂–∏—Ç–µ period –≤ –¥–Ω—è—Ö (days) –∏–ª–∏ —á–∞—Å–∞—Ö (hours)' }
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ cron-–∑–∞–¥–∞—á–∏
    const cronSecret = query.secret
    const configSecret = process.env.CRON_SECRET
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    if (configSecret && cronSecret !== configSecret) {
      return { 
        status: 401,
        body: { error: 'Unauthorized' } 
      }
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
    const supabase = serverSupabaseServiceRole(event)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const now = new Date()
    
    // –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const startTime = new Date(now)
    
    // –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const endTime = new Date(now)
    if (days > 0) {
      endTime.setDate(endTime.getDate() + days)
    }
    if (hours > 0) {
      endTime.setHours(endTime.getHours() + hours)
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const { data: bookings, error } = await supabase
      .from('bookings')
      .select('*, profile:user_id(name, phone, telegram_id), boat:boat_id(name, id)')
      .eq('status', 'confirmed')
      .gte('start_time', startTime.toISOString())
      .lt('start_time', endTime.toISOString())
      .order('start_time', { ascending: true })
    
    if (error) {
      console.error('Error fetching bookings for reminders:', error)
      return { 
        status: 500, 
        body: { error: 'Failed to fetch bookings' } 
      }
    }
    
    if (!bookings || bookings.length === 0) {
      return { 
        status: 200, 
        body: { message: 'No bookings to send reminders for', count: 0 } 
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const reminderResults = await Promise.allSettled(
      bookings.map(async (booking) => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const reminderMessage = formatReminderMessage(booking, days, hours)
        
        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å Telegram ID
        if (booking.profile?.telegram_id) {
          await sendClientReminder(booking, reminderMessage)
        }
        
        // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        await sendAdminNotification(reminderMessage, {
          parseMode: 'HTML',
          boatId: booking.boat_id,
          bookingId: booking.id
        })
        
        return booking.id
      })
    )
    
    // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const successCount = reminderResults.filter(r => r.status === 'fulfilled').length
    
    return { 
      status: 200, 
      body: { 
        message: `Sent ${successCount} of ${bookings.length} reminders`,
        count: successCount
      } 
    }
  } catch (error) {
    console.error('Error sending reminders:', error)
    return { 
      status: 500, 
      body: { error: 'Internal server error' } 
    }
  }
})

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Telegram
async function sendClientReminder(booking: any, message: string): Promise<boolean> {
  if (!booking.profile?.telegram_id) return false
  
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN
    if (!token) return false
    
    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: booking.profile.telegram_id,
        text: message,
        parse_mode: 'HTML'
      })
    })
    
    return response.ok
  } catch (error) {
    console.error('Error sending reminder to client:', error)
    return false
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function formatReminderMessage(booking: any, days: number, hours: number): string {
  const startTime = new Date(booking.start_time)
  const formattedDate = startTime.toLocaleDateString('ru-RU')
  const formattedTime = startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
  
  let reminderType = ''
  if (days === 1) {
    reminderType = '–∑–∞–≤—Ç—Ä–∞'
  } else if (days > 1) {
    reminderType = `—á–µ—Ä–µ–∑ ${days} ${getDayWord(days)}`
  } else if (hours > 0) {
    reminderType = `—á–µ—Ä–µ–∑ ${hours} ${getHourWord(hours)}`
  }
  
  let message = `<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${reminderType}</b>\n\n`
  message += `üö§ –õ–æ–¥–∫–∞: <b>${booking.boat.name}</b>\n`
  message += `üìÖ –î–∞—Ç–∞: <b>${formattedDate}</b>\n`
  message += `‚è∞ –í—Ä–µ–º—è: <b>${formattedTime}</b>\n`
  
  if (booking.profile) {
    message += `üë§ –ö–ª–∏–µ–Ω—Ç: <b>${booking.profile.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n`
    
    if (booking.profile.phone) {
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${booking.profile.phone}</b>\n`
    }
  }
  
  if (booking.guests_count) {
    message += `üë• –ì–æ—Å—Ç–µ–π: <b>${booking.guests_count}</b>\n`
  }
  
  return message
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
function getDayWord(days: number): string {
  const lastDigit = days % 10
  const lastTwoDigits = days % 100
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '–¥–Ω–µ–π'
  }
  
  if (lastDigit === 1) {
    return '–¥–µ–Ω—å'
  }
  
  if (lastDigit >= 2 && lastDigit <= 4) {
    return '–¥–Ω—è'
  }
  
  return '–¥–Ω–µ–π'
}

function getHourWord(hours: number): string {
  const lastDigit = hours % 10
  const lastTwoDigits = hours % 100
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '—á–∞—Å–æ–≤'
  }
  
  if (lastDigit === 1) {
    return '—á–∞—Å'
  }
  
  if (lastDigit >= 2 && lastDigit <= 4) {
    return '—á–∞—Å–∞'
  }
  
  return '—á–∞—Å–æ–≤'
} 