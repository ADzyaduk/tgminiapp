// ~/composables/useAuth.ts
import { ref, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { useSupabaseClient } from '#imports'

// Global state - –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const user = ref<null | { id: string; email: string; role: string }>(null)
const isAdmin = ref(false)
const loading = ref(true)
const error = ref<string | null>(null)

let authListener: any = null
let isInitialized = false

export function useAuth() {
  const router = useRouter()
  const supabaseClient = useSupabaseClient()

  async function fetchUserProfile(userId: string) {
    loading.value = true
    error.value = null
    try {
      const { data: profile, error: pErr } = await supabaseClient
        .from('profiles')
        .select('id, email, role')
        .eq('id', userId)
        .single()
        
      if (pErr) {
        console.error('Profile query error:', pErr)
        throw pErr
      }
      
      if (!profile) {
        user.value = null
        isAdmin.value = false
        return
      }
      
      user.value = profile
      isAdmin.value = profile.role === 'admin'
    } catch (e: any) {
      console.error('Error fetching user profile:', e)
      error.value = e.message
      user.value = null
      isAdmin.value = false
    } finally {
      loading.value = false
    }
  }

  async function fetchUser() {
    loading.value = true
    error.value = null
    try {
      const { data: { user: u }, error: err } = await supabaseClient.auth.getUser()
      if (err) throw err
      if (!u) {
        user.value = null
        isAdmin.value = false
        return
      } else {
        await fetchUserProfile(u.id)
      }
    } catch (e: any) {
      console.error('Error fetching user:', e)
      error.value = e.message
      user.value = null
      isAdmin.value = false
    } finally {
      loading.value = false
    }
  }

  async function signOut() {
    loading.value = true
    try {
      await supabaseClient.auth.signOut()
      user.value = null
      isAdmin.value = false
      router.replace('/login')
    } catch (e: any) {
      error.value = e.message
    } finally {
      loading.value = false
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º auth listener —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  if (!isInitialized) {
    authListener = supabaseClient.auth.onAuthStateChange((event, session) => {
      console.log('üîÑ Auth state change:', event, session?.user?.email)
      if (event === 'SIGNED_OUT') {
        user.value = null
        isAdmin.value = false
      } else if (event === 'SIGNED_IN' && session?.user) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º user –∏–∑ session –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ getUser() –≤—ã–∑–æ–≤–∞
        console.log('‚úÖ Using session from auth event:', session.user.email)
        fetchUserProfile(session.user.id)
      } else if (event === 'TOKEN_REFRESHED') {
        // –î–ª—è TOKEN_REFRESHED –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fetchUser
        setTimeout(() => {
          fetchUser()
        }, 100)
      }
    })
    
    isInitialized = true
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    if (process.client) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ getUser()
      console.log('üîç Checking for existing session on app init...')
      supabaseClient.auth.getSession().then(({ data: { session }, error }) => {
        console.log('üîç getSession result:', { session: session?.user?.email, error })
        if (error) {
          console.error('‚ùå Error getting initial session:', error)
          loading.value = false
          return
        }
        
        if (session?.user) {
          console.log('‚úÖ Found existing session, user:', session.user.email)
          fetchUserProfile(session.user.id)
        } else {
          console.log('‚ùå No existing session found')
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å localStorage –Ω–∞–ø—Ä—è–º—É—é
          const stored = localStorage.getItem('supabase.auth.token')
          console.log('üíæ localStorage token:', stored ? 'exists' : 'missing')
          loading.value = false
        }
      })
    }
  }

  onMounted(() => {
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º fetchUser() –≤ onMounted - auth listener –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // if (!user.value && !loading.value) {
    //   fetchUser()
    // }
  })
  
  // Clean up listener when component unmounts
  onUnmounted(() => {
    // –ù–ï –æ—á–∏—â–∞–µ–º listener –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, 
    // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  })

  return { user, isAdmin, loading, error, fetchUser, fetchUserProfile, signOut }
}
